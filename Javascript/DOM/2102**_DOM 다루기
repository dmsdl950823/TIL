
# DOM 다루기
DOM 조작은 대개 매우 단순하며 자바스크립트를 쓸 때도 일반적인 HTML 코드와 마찬가지로 하면 됩니다. 하지만 이따금은 DOM 조작이 눈에 보이는 것 만큼 단순하진 않을 때도 있습니다. 브라우저는 버그와 비일고나성이 많아서 DOM 코딩을 다른 코딩보다 어렵게 만듭니다.

## 동적 스크립트
<script> 요소는 자바스크립트 코드를 페이지에 삽입하는데 src 속성으로 외부 파일을 불러오거나 요소 안에 직접 스크립트 텍스트를 쓸 수 있습니다. 동적 스크립트란 페이지를 불러오는 시점에서는 존재하지 않았지만 DOM을 통해 이후 추가한 <script> 입니다. 동적 스크립트에는 1. 외부 파일을 불러오거나 2. 텍스트를 직접 삽입하는 두 가지 방법이 있습니다.

const script = document.crateElement('script')
script.type = 'text/javascript'
script.src = 'client.js'
document.body.appendChild(script)
이 코드에서 주의할점은, 마지막 줄에서 <script>요소를 문서 트리에 삽입한 뒤에만 스크립트를 내려받기 시작한다는 점입니다. 한 가지 문제점은, 동적으로 스크립트를 불러올 때 완료 시점을 정확히 알 수 없다는 것 입니다. 이를 정확히 처리할 수 있는 표준 방법이 존재하지 않습니다. 

자바스크립트 코드를 삽입하는 다른 방법은 인라인 스크립트 입니다.

<script type="text/javascript">
  function sayHi () {
    console.log('Hi')
  }
</script>


const script = document.createElement('script')
script.type = 'text/javascript'
script.text = 'function sayHi() { console.log("Hi") }'
try {
  script.appendChild(document.createTextNode('code') // 그 외 브라우저
} catch (err) {
  script.text = 'code' // safari 초기버전 지원
}

document.body.appendChild(script)
이런식으로 불러온 코드는 전역 스코프에서 실행되며 스크립트가 실행된 직후 사용 가능합니다. 사실 이는 전역 스코프에서 같은 문자열을 eval()에 넘긴것과 마찬가지입니다.





## 동적 스타일
CSS 스타일을 HTML 페이지에 삽입하는 요소는 두 가지 입니다. <link> 요소는 외부 CSS파일을 불러올 때 사용하고 <style> 요소는 인라인 스타일에 사용합니다. 동적 스크립트와 마찬가지로 동적 스타일 역시 페이지를 처음 불러왔을 때는 존재하지 않다가 나중에 추가한 스타일입니다.

// <link rel = 'stylesheet' type="text/css" href="styles.css">

const link = document.createElement('link')
link.rel = 'stylesheet'
link.type = 'text/css'
link.href = 'styles.css'
const head = document.getElementByTagName('head')[0]
head.appendChild(link)
외부 파일에서 스타일을 불러오는 과정은 비동기적으로 이루어 지므로 자바스크립트 코드 실행 순서와는 무관하게 로드합니다. 일반적으로 스타일이 완전히 로드된 시점을 알 필요는 없지만 이벤트 등 몇가지 테크닉으로 알 수 있습니다.

const css = 'body { background: red }'
const style = document.createElement('style')
style.tyle = 'text/css'
try {
  style.appendChild(document.createTextNode(css)
} catch (ex) {
  style.styleSheet.cssText = css
}

const head = document.getElementByTagName('head')[0]
head.appendChild(style)
이런 방식으로 명시한 스타일을 페이지에 즉시 추가되며 즉시 반영됩니다. 

## 노드 리스트 사용

NodeList 객체와 이와 관련된 NamedNodeMap, HTMLCollecton을 이해하면 DOM을 전체적으로 이해하는데 큰 도음이 됩니다. 각 컬렉션은 모두 '살아있는' 것으로 간주되는데, 이 말은 문서 구조가 바뀔 때마다 컬렉션도 업데이트 되므로 항상 정확한 정보를 반환한다는 것 입니다. 달리 말하면 NodeList 객체는 해당 객체에 접근할 때마다 수행되는 쿼리 입니다.

NodeList를 순회해야 할 때는 항상 새 변수에 컬렉션 길이를 저장하여 사용하거나 배열로 변경하여 사용해야합니다.

const divs = document.getElementByTagName('div')

for (let i = 0; i < div.length; i++) {
  div = document.createElement('div')
  document.body.appendChild(div)
}
일반적으로 말해 NodeList 자체에 접근하는 일은 컬렉션에 접근할 때마다 다시 쿼리하므로 NodeList에서 자주 사용하는 겂은 변수에 저장하여 사용하세요.

